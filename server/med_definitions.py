# -*- coding: utf-8 -*-
"""med_definitions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11nKO-d1zUd4kDp-r-YrpbAcwyr1kp8of
"""

!pip install google-cloud-vision
from google.cloud import vision
from google.colab import drive
drive.mount('/content/gdrive')
import pandas as pd

# # Upload an image from Desktop
# import os
# from google.colab import files
# os.chdir("/content/gdrive/My Drive/")

# uploaded = files.upload()

# for fn in uploaded.keys():
#   print('User uploaded file "{name}" with length {length} bytes'.format(
#       name=fn, length=len(uploaded[fn])))

# Commented out IPython magic to ensure Python compatibility.
# Detecting the text from an image
# Warning! text.jpg is read from gdrive

import os
os.environ['COMPUTER_VISION_SUBSCRIPTION_KEY'] = '2dbff049ab324c0fbd573f09d4cfe598'
os.environ['COMPUTER_VISION_ENDPOINT'] = 'https://canadacentral.api.cognitive.microsoft.com/'

import requests
# If you are using a Jupyter notebook, uncomment the following line.
# %matplotlib inline
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from PIL import Image
from io import BytesIO

# Add your Computer Vision subscription key and endpoint to your environment variables.
if 'COMPUTER_VISION_SUBSCRIPTION_KEY' in os.environ:
    subscription_key = os.environ['COMPUTER_VISION_SUBSCRIPTION_KEY']
else:
    print("\nSet the COMPUTER_VISION_SUBSCRIPTION_KEY environment variable.\n**Restart your shell or IDE for changes to take effect.**")
    sys.exit()

if 'COMPUTER_VISION_ENDPOINT' in os.environ:
    endpoint = os.environ['COMPUTER_VISION_ENDPOINT']

ocr_url = endpoint + "vision/v2.1/ocr"

image_path = "/content/gdrive/My Drive/text.png"
# Read the image into a byte array
image_data = open(image_path, "rb").read()
# Set Content-Type to octet-stream
headers = {'Ocp-Apim-Subscription-Key': subscription_key, 'Content-Type': 'application/octet-stream'}
# put the byte array into your post request
response = requests.post(ocr_url, headers=headers, params=params, data = image_data)

# response.raise_for_status()

analysis = response.json()

# Extract the word bounding boxes and text.
line_infos = [region["lines"] for region in analysis["regions"]]
text = []
for line in line_infos:
    for word_metadata in line:
        for word_info in word_metadata["words"]:
            text.append(word_info["text"])

# Convert list to string
def listToString(s):  
    
    # initialize an empty string 
    str1 = " " 
    
    # return string   
    return (str1.join(s))  
        
# Driver code
text_str = listToString(text)
print(text_str) 

# Display the image and overlay it with the extracted text.
for word in text:
    print(word)

# Extracting key phrases

!pip install azure-ai-textanalytics
key = "d73184259e0a442c9690c7239e85689f"
endpoint = "https://medkeyphrase.cognitiveservices.azure.com/"

from azure.ai.textanalytics import single_extract_key_phrases

def key_phrase_extraction(endpoint, key):

    try:
        document = text_str

        response = single_extract_key_phrases(endpoint=endpoint, credential=key, input_text= document)
        
        key_phrases = []
        if not response.is_error:
            # print("\tKey Phrases:")
            for phrase in response.key_phrases:
                key_phrases.append(phrase)
                # print("\t\t", phrase)
            return key_phrases
        else:
            print(response.id, response.error)

    except Exception as err:
        print("Encountered exception. {}".format(err))

key_phrases = key_phrase_extraction(endpoint, key)
key_phrases_str = listToString(key_phrases)

# Print the definitions of medical terms

import json
import argparse
import urllib.request

# keyMed = open("/content/gdrive/My Drive/keyMedDict.TXT", 'r')
# keys = keyMed.readline()
# parser = argparse.ArgumentParser()
# parser.add_argument("word", type=str)
# args = parser.parse_args()
# query = args.word

dictKey = "0f8e07a4-88bf-4a96-bd58-8da4ffd2ad6f"

from termcolor import colored
med_terms = []
for word in set(j.lower() for j in key_phrases_str.split()):
  urlfrmt = "https://www.dictionaryapi.com/api/v3/references/medical/json/"+word+"?key=" + dictKey
  response = urllib.request.urlopen(urlfrmt)
  jsStruct = json.load(response)
  meaning = jsStruct[0]
  if ('shortdef' in meaning): 
    definitions = meaning['shortdef']
    if meaning['meta']['id'] != query:
      print(colored(meaning['meta']['id'], 'blue'))
    try:
      print(definitions[0])
      print("\n")
    except KeyError:
      pass
    med_terms.append(word)